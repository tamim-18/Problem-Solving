class Solution {
    public int search(int[] nums, int target) {
        int id = find_id(nums, target, 0, nums.length - 1);

        int id1 = binarySearch(nums, target, id, nums.length - 1);
        int id2 = binarySearch(nums, target, 0, id - 1);

        if (id1 != -1) return id1;
        if (id2 != -1) return id2;

        return -1; // Target not found
    }

    private int find_id(int[] nums, int target, int low, int high) {
        while (low <= high) {
            if (nums[low] <= nums[high]) {
                return low;
            }

            int mid = low + (high - low) / 2;
            int prev = (mid - 1 + nums.length) % nums.length;
            int next = (mid + 1) % nums.length;

            if (nums[mid] <= nums[prev] && nums[mid] <= nums[next]) {
                return mid;
            } else if (nums[mid] >= nums[high]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return -1;
    }

    private int binarySearch(int[] nums, int target, int low, int high) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] == target) {
                return mid; // Found the target
            } else if (nums[mid] < target) {
                low = mid + 1; // Search the right half
            } else {
                high = mid - 1; // Search the left half
            }
        }

        return -1; // Target not found
    }
}

link: https://leetcode.com/problems/search-in-rotated-sorted-array/
